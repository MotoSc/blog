<?xml-stylesheet type="text/css" href="book.css"?>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>闲云野鹤</title>
    <description>一位懒散惯了的前iOS开发者，一个想成为Web开发者的人。可是懒散惯了就是懒散惯了，没有办法学的深入，那就让我在表面好好地趴着吧- =。
</description>
    <link>http://objc.co/</link>
    <atom:link href="http://objc.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 08 Jul 2016 15:56:14 +0800</pubDate>
    <lastBuildDate>Fri, 08 Jul 2016 15:56:14 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>读书笔记《代码之髓：编程语言核心概念》 第二章</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;程序设计语言诞生史&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;可编程语言的发展&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;通过连接电缆，调整电缆的连接方式进行编程。（初代计算机ENIAC）&lt;/li&gt;
  &lt;li&gt;打点的纸带作为数据和逻辑的载体，计算机通过读取纸带上的数据来执行程序。可以通过改变纸带上的数据进行编程。（EDSAC计算机）&lt;/li&gt;
  &lt;li&gt;将公式转化为机器语言的编程语言出现。（FORTRAN）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;经典摘录：FORTRAN的设计者John Backus说道：我的大部分成果源自我的懒惰，因为不喜欢写程序，所以设计出了能轻松编写程序的系统。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;程序设计语言产生的原因&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;原因：为了获得更轻松便捷的体验而编写程序。但轻松不等于偷工减料。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;懒惰：程序员的三大美德之一&lt;/h4&gt;

&lt;p&gt;优秀程序员的三大美德：&lt;em&gt;懒惰、急躁和傲慢&lt;/em&gt;。（由Perl语言设计者Larry Wall提出的）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;懒惰(Laziness)是一项为了减少总能量支出，而不留余力地努力的素质。为了省下功夫，设计的程序逐步的呗更多人使用。单独回答每个使用者的一位费时费力，于是，程序中开始出现了注释。所以，懒惰是程序员最宝贵的素质。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;section-4&quot;&gt;何为“便捷”&lt;/h6&gt;
&lt;p&gt;在编程语言中，便捷没有一个统一的定义，如PHP写Web服务就很轻松，但是不擅长文字处理。相反Haskell和OCaml这样的ML（Meta-Language）系列，编写处理语言文字的应用就很便捷，但是编写Web服务器就没有PHP使用得那么多了。&lt;/p&gt;

&lt;p&gt;程序设计语言的选用因使用者的目的不同而不同。不同的语言致力于打成不同的目的。如果把实现高速执行而设计的C++语言和为了代码阅读而设计的Python放在一起，说Python的可读性差或者Python的执行速度慢，这样争论的意义并不是很大。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;语言不同，便捷的含义也不同。语言只是实现某一目的的工具，是否适合自己还是要看这门语言能帮助自己发挥多大的能力，而不是看这种语言是否流行，别人能用它发挥多大的能力。选择一门语言，应根据自己的实际情况来选择好的工具。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 15:54:24 +0800</pubDate>
        <link>http://objc.co/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2016/07/08/reader-code-spirit_2.html</link>
        <guid isPermaLink="true">http://objc.co/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2016/07/08/reader-code-spirit_2.html</guid>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>读书笔记《代码之髓：编程语言核心概念》第一章</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;第一章 如何高效地学习语言&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;在比较中学习&lt;/h3&gt;

&lt;p&gt;多学几门语言，在比较中去学习。接触的语言多了之后，可以发现什么地方是两种语言共通的，什么地方是每种独有的。&lt;/p&gt;

&lt;p&gt;语言不同，规则不同&lt;/p&gt;

&lt;p&gt;编程语言中的规则各式各样。这些规则不具有普遍的意义，只是当前场景这样做可能更方便，如&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;语言和&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;语言中的真假值(&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;语言，&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;为假，其余为真。&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;为真)。&lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt;中有真假值这一数据类型，在做条件判断的时候必须使用这种类型（我的天哪，头回听说。。）。因为0为整形不是真假值类型，如若以&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;为判断条件会发生编译错误。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;总结：
1.多种语言共通的知识才是要点。掌握了这些要点，学习其它语言才会更加轻松。
2.&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;为真、&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;为假、&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;即非真即非假的语言都是存在的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;在历史中学习&lt;/h3&gt;

&lt;p&gt;理解语言设计者的意图，了解语言诞生的历史背景和应用场景。设计者为何创造了这种语言，以及语言的历史变迁。这些知识都能方便我们了解这些语言更适合去做什么，有什么功能适合我们去用它来做什么工作。&lt;/p&gt;

&lt;p&gt;了解语言之后，可以根据自己的需求有选择的学习。不过有时某种语言的热门程度也是大家选择它的主要原因。每种语言都可能有兴盛有衰弱，所以根据比较不同语言、了解语言的历史和变化的原因，培养对不同语言的理解能力是非常重要的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;小结: 学习语言的两种方法:&lt;code class=&quot;highlighter-rouge&quot;&gt;在比较中学习&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;在历史中学习&lt;/code&gt;。其中&lt;code class=&quot;highlighter-rouge&quot;&gt;在比较重学习&lt;/code&gt;不特指某种语言的编程，而是同时比较集中语言。从而掌握知识的重点，哪些知识是共通的，哪些是不同的。  &lt;code class=&quot;highlighter-rouge&quot;&gt;在历史中学习&lt;/code&gt;指的是探寻语言的变化，在变化前存在哪些问题，从而理解语言为何开发出各种新的功能。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 12:12:24 +0800</pubDate>
        <link>http://objc.co/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2016/07/08/reader-code-spirit_1.html</link>
        <guid isPermaLink="true">http://objc.co/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2016/07/08/reader-code-spirit_1.html</guid>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>博客的第一篇文章</title>
        <description>&lt;p&gt;终于把&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;的博客放到了Github上，并绑定上了域名。一路上磕磕碰碰的，完全是一个不小心就设置成功了。&lt;/p&gt;

&lt;p&gt;自打自己做开发以来，就一直想拥有一个自己的博客，主要是做一些IT的技术分享（为了方便找工作。。😄）。当时为了能体现出自己的技术，选择了各种各样的方式来建立自己的博客。从最早的新浪博客，其间依次更换了&lt;a href=&quot;http://blog.csdn.net/grozy_sun/&quot;&gt;CSDN&lt;/a&gt;,&lt;a href=&quot;http://my.oschina.net/9meo&quot;&gt;开源中国&lt;/a&gt;。后来开始使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Hexo&lt;/code&gt;写了一阵子的博客，不过后来为了还是觉得自己写才是真本事，开始尝试用&lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt;开发博客，不过都因为&lt;code class=&quot;highlighter-rouge&quot;&gt;Nginx&lt;/code&gt;没弄明白，最后一只也没有放到服务器上。。&lt;/p&gt;

&lt;p&gt;现在，我已经告别了自己两年的开发者生涯，成为了一名算是独立开发者了吧。写博客也脱离了初衷，不过也多亏了之前的瞎折腾。虽说学的都没有精通，不过不得不承认多学一些语言之后也有多学的好处，你会抓住学习新语言的重点，会帮助你更快的挺高学习一门新语言的能力。反正现在也不用再出去装了，那就随便选择一个工具来构建这个博客吧。&lt;/p&gt;

&lt;p&gt;从今天开始，我的业余时间可能会越来越多。也可以把更多的时间投入到自己心爱的一个行业上，而不是把他当做工作，只是兴趣。&lt;/p&gt;

&lt;p&gt;最后放上自家爱犬的一张图片
&lt;img src=&quot;http://objc.co/images/2016-07-08/IMG_2484.JPG&quot; alt=&quot;Amy&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;这里只是个开始&lt;/h2&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 00:36:15 +0800</pubDate>
        <link>http://objc.co/%E6%9D%82%E8%B0%88/2016/07/08/the-first-post.html</link>
        <guid isPermaLink="true">http://objc.co/%E6%9D%82%E8%B0%88/2016/07/08/the-first-post.html</guid>
        
        
        <category>杂谈</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jul 2016 17:57:09 +0800</pubDate>
        <link>http://objc.co/jekyll/update/2016/07/07/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://objc.co/jekyll/update/2016/07/07/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
